{"version":3,"file":"lib_index_js.6208d44c69ab5d8d0af3.js","mappings":";;;;;;;;;;;;;;;;;;AAAqE;AAOhB;AASrD;;GAEG;AACH,MAAM,MAAM,GAAgC;IAC1C,QAAQ;IACR,EAAE,EAAE,sBAAsB;IAC1B,SAAS,EAAE,IAAI;CAChB,CAAC;AAEF;;GAEG;AACI,MAAM,eAAe;IAI1B,YAAmB,IAA+B;QAD3C,QAAG,GAA8E,SAAS,CAAC;QAEhG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CACP,KAAoB;QAEpB,MAAM,aAAa,GAAG,GAAG,EAAE;;YACvB,UAAI,CAAC,GAAG,0CAAE,QAAQ,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;QAC1D,CAAC,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,+DAAa,CAAC;YAC/B,SAAS,EAAE,uBAAuB;YAClC,KAAK,EAAE,gBAAgB;YACvB,OAAO,EAAE,aAAa;YACtB,OAAO,EAAE,qCAAqC;SAC/C,CAAC,CAAC;QAEH,wEAAwE;QACxE,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;QACtD,OAAO,IAAI,kEAAkB,CAAC,GAAG,EAAE;YACjC,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED;;;;GAIG;AACH,SAAS,QAAQ,CAAC,GAAoB;IACpC,GAAG,CAAC,WAAW,CAAC,kBAAkB,CAAC,UAAU,EAAE,IAAI,eAAe,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC,CAAC;AAClF,CAAC;AAED;;GAEG;AACH,iEAAe,MAAM,EAAC","sources":["webpack://shell_extension/./src/index.ts"],"sourcesContent":["import { IDisposable, DisposableDelegate } from '@lumino/disposable';\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { ToolbarButton } from '@jupyterlab/apputils';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport {\n  NotebookPanel,\n  INotebookModel\n} from '@jupyterlab/notebook';\n\n/**\n * The plugin registration information.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  activate,\n  id: 'toolbar-shell-button',\n  autoStart: true,\n};\n\n/**\n * A notebook widget extension that adds a button to the toolbar.\n */\nexport class ButtonExtension\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\n{\n  public app: JupyterFrontEnd<JupyterFrontEnd.IShell, 'desktop' | 'mobile'> | undefined = undefined;\n  public constructor(init?: Partial<ButtonExtension>) {\n    Object.assign(this, init);\n  }\n\n  /**\n   * Create a new extension that shows button in the toolbar.\n   * The button can be used to create a console instance for the notebook.\n   *\n   * @param panel Notebook panel\n   * @returns Disposable on the added button\n   */\n  createNew(\n    panel: NotebookPanel\n  ): IDisposable {\n    const createConsole = () => {\n        this.app?.commands.execute('notebook:create-console');\n    };\n    const button = new ToolbarButton({\n      className: 'create-console-button',\n      label: 'Create Console',\n      onClick: createConsole,\n      tooltip: 'Create console for current notebook'\n    });\n\n    // 10 is the index in the standard toolbar to correctly place the button\n    panel.toolbar.insertItem(10, 'createConsole', button);\n    return new DisposableDelegate(() => {\n      button.dispose();\n    });\n  }\n}\n\n/**\n * Activate the extension.\n *\n * @param app Main application object\n */\nfunction activate(app: JupyterFrontEnd): void {\n  app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension({app: app}));\n}\n\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n"],"names":[],"sourceRoot":""}